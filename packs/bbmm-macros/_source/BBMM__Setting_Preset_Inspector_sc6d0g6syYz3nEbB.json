{
  "name": "BBMM: Setting Preset Inspector",
  "type": "script",
  "flags": {
    "macro-wheel": {
      "activeCondition": ""
    }
  },
  "command": "(async () => {\n\t// =========================================================================\n\t// BBMM Settings Preset Inspector (macro)\n\t// - Works with \"envelope\" shape: { type:\"bbmm-settings\", world/client/user:{ns:{key:value}} }\n\t// - No need for .items/.entries in stored data\n\t// =========================================================================\n\n\t// -------------------------------------------------------------------------\n\t// Constants (allow runtime overrides from window.* if you expose them)\n\t// -------------------------------------------------------------------------\n\tconst BBMM_ID =\n\t\t(typeof window.BBMM_ID === \"string\" && window.BBMM_ID) || \"bbmm\";\n\n\t// Prefer settingsPresetsUser if you defined SETTING_SETTINGS_PRESETS_U on window\n\tconst SETTING_SETTINGS_PRESETS =\n\t\t(typeof window.SETTING_SETTINGS_PRESETS_U === \"string\" && window.SETTING_SETTINGS_PRESETS_U)\n\t\t|| \"settingsPresetsUser\";\n\n\t// -------------------------------------------------------------------------\n\t// Logging helper → respects your debugLog if present\n\t// -------------------------------------------------------------------------\n\tconst log = (...a) => { try { if (typeof debugLog === \"function\") debugLog(...a); } catch {} };\n\n\t// -------------------------------------------------------------------------\n\t// HTML escape helper\n\t// -------------------------------------------------------------------------\n\tfunction esc(s) {\n\t\treturn String(s ?? \"\")\n\t\t\t.replaceAll(\"&\",\"&amp;\")\n\t\t\t.replaceAll(\"<\",\"&lt;\")\n\t\t\t.replaceAll(\">\",\"&gt;\")\n\t\t\t.replaceAll('\"',\"&quot;\");\n\t}\n\n\t// -------------------------------------------------------------------------\n\t// Value preview / pretty helpers\n\t// -------------------------------------------------------------------------\n\tfunction toPreview(v) {\n\t\ttry {\n\t\t\tif (v === undefined) return \"undefined\";\n\t\t\tif (v === null) return \"null\";\n\t\t\tif (typeof v === \"string\") return v;\n\t\t\tif (typeof v === \"number\" || typeof v === \"boolean\") return String(v);\n\t\t\treturn JSON.stringify(v);\n\t\t} catch {\n\t\t\treturn String(v);\n\t\t}\n\t}\n\n\tfunction toPretty(v) {\n\t\ttry {\n\t\t\tif (typeof v === \"string\") {\n\t\t\t\ttry { return JSON.stringify(JSON.parse(v), null, 2); }\n\t\t\t\tcatch { return v; }\n\t\t\t}\n\t\t\treturn JSON.stringify(v, null, 2);\n\t\t} catch {\n\t\t\treturn String(v);\n\t\t}\n\t}\n\n\t// -------------------------------------------------------------------------\n\t// Flatten a bbmm-settings envelope into [{namespace,key,value,scope,config}]\n\t// Accepts legacy .items/.entries too (no-op if already flat)\n\t// -------------------------------------------------------------------------\n\tfunction toPresetItems(preset) {\n\t\tif (Array.isArray(preset?.items)) return preset.items;\n\t\tif (Array.isArray(preset?.entries)) return preset.entries;\n\n\t\tconst out = [];\n\t\tconst isPlain = (o) => !!o && typeof o === \"object\" && !Array.isArray(o);\n\n\t\tfunction addScope(scopeName, scopeData) {\n\t\t\tif (!scopeData) return;\n\n\t\t\t// Be liberal in what we accept\n\t\t\tif (Array.isArray(scopeData)) { out.push(...scopeData); return; }\n\t\t\tif (Array.isArray(scopeData?.entries)) { out.push(...scopeData.entries); return; }\n\n\t\t\tif (isPlain(scopeData)) {\n\t\t\t\tfor (const [ns, nsData] of Object.entries(scopeData)) {\n\t\t\t\t\tif (isPlain(nsData)) {\n\t\t\t\t\t\tfor (const [key, value] of Object.entries(nsData)) {\n\t\t\t\t\t\t\tout.push({\n\t\t\t\t\t\t\t\tnamespace: String(ns),\n\t\t\t\t\t\t\t\tkey: String(key),\n\t\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\t\tscope: scopeName,\n\t\t\t\t\t\t\t\tconfig: true\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Rare fallback: non-object at namespace level\n\t\t\t\t\t\tout.push({\n\t\t\t\t\t\t\tnamespace: \"\",\n\t\t\t\t\t\t\tkey: String(ns),\n\t\t\t\t\t\t\tvalue: nsData,\n\t\t\t\t\t\t\tscope: scopeName,\n\t\t\t\t\t\t\tconfig: true\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\taddScope(\"world\", preset?.world);\n\t\taddScope(\"client\", preset?.client);\n\t\taddScope(\"user\", preset?.user);\n\n\t\treturn out;\n\t}\n\n\t// -------------------------------------------------------------------------\n\t// Load all presets map from game settings\n\t// Shape: { \"<name>\": envelope | flat }\n\t// -------------------------------------------------------------------------\n\tfunction getAllSettingsPresets() {\n\t\treturn game.settings.get(BBMM_ID, SETTING_SETTINGS_PRESETS) || {};\n\t}\n\n\t// -------------------------------------------------------------------------\n\t// Inspector UI (ApplicationV2)\n\t// -------------------------------------------------------------------------\n\tclass BBMMPresetInspector extends foundry.applications.api.ApplicationV2 {\n\t\tconstructor({ name, items }) {\n\t\t\tsuper({\n\t\t\t\tid: `bbmm-preset-inspector-${name}`,\n\t\t\t\twindow: {title: `BBMM — Inspect Settings Preset: ${name}`},\n\t\t\t\twidth: 1200,\n\t\t\t\theight: 600,\n\t\t\t\tresizable: true\n\t\t\t});\n\t\t\tthis.presetName = name;\n\t\t\tthis.itemsAll = Array.isArray(items) ? items : [];\n\t\t\tthis.filter = \"\";\n\t\t\tthis.sortKey = \"ns\";\n\t\t\tthis.sortDir = \"asc\";\n\t\t\tthis._expanded = new Set();\n\n\t\t\tthis._minW = 500;\n\t\t\tthis._maxW = 1200;\n\t\t\tthis._minH = 400;\n\t\t\tthis._maxH = 700;\n\t\t}\n\n\t\t_prepareRows() {\n\t\t\tconst q = String(this.filter ?? \"\").trim().toLowerCase();\n\t\t\tconst rows = this.itemsAll.map(e => ({\n\t\t\t\tns: e.namespace ?? \"\",\n\t\t\t\tkey: e.key ?? \"\",\n\t\t\t\tscope: e.scope ?? \"\",\n\t\t\t\tvisible: e.config ? \"config\" : \"hidden\",\n\t\t\t\tpreview: toPreview(e.value),\n\t\t\t\tpretty: toPretty(e.value),\n\t\t\t\t_value: e.value\n\t\t\t}));\n\n\t\t\tconst filtered = q\n\t\t\t\t? rows.filter(r =>\n\t\t\t\t\tr.ns.toLowerCase().includes(q) ||\n\t\t\t\t\tr.key.toLowerCase().includes(q) ||\n\t\t\t\t\tr.scope.toLowerCase().includes(q) ||\n\t\t\t\t\tr.visible.toLowerCase().includes(q) ||\n\t\t\t\t\t(r.preview ?? \"\").toLowerCase().includes(q))\n\t\t\t\t: rows;\n\n\t\t\tconst dir = this.sortDir === \"asc\" ? 1 : -1;\n\t\t\tconst cmp = (a, b) => String(a ?? \"\").localeCompare(String(b ?? \"\"));\n\n\t\t\tfiltered.sort((a, b) => {\n\t\t\t\tif (this.sortKey === \"ns\") return (cmp(a.ns, b.ns) || cmp(a.key, b.key)) * dir;\n\t\t\t\tif (this.sortKey === \"key\") return (cmp(a.key, b.key) || cmp(a.ns, b.ns)) * dir;\n\t\t\t\tif (this.sortKey === \"scope\") return (cmp(a.scope, b.scope) || cmp(a.ns, b.ns)) * dir;\n\t\t\t\tif (this.sortKey === \"visible\") return (cmp(a.visible, b.visible) || cmp(a.ns, b.ns)) * dir;\n\t\t\t\treturn 0;\n\t\t\t});\n\n\t\t\tthis.rows = filtered;\n\t\t}\n\n\t\t_renderHeader() {\n\t\t\tconst arrow = (k) => this.sortKey !== k ? \"\" : (this.sortDir === \"asc\" ? \" ▲\" : \" ▼\");\n\t\t\treturn (\n\t\t\t\t`<div class=\"h c-ns sortable\" data-sort=\"ns\">Namespace${arrow(\"ns\")}</div>` +\n\t\t\t\t`<div class=\"h c-key sortable\" data-sort=\"key\">Key${arrow(\"key\")}</div>` +\n\t\t\t\t`<div class=\"h c-scope sortable\" data-sort=\"scope\">Scope${arrow(\"scope\")}</div>` +\n\t\t\t\t`<div class=\"h c-vis sortable\" data-sort=\"visible\">Visibility${arrow(\"visible\")}</div>` +\n\t\t\t\t`<div class=\"h c-val\">Value</div>`\n\t\t\t);\n\t\t}\n\n\t\t_renderRows() {\n\t\t\treturn (this.rows ?? []).map(r => {\n\t\t\t\tconst id = `${r.ns}::${r.key}`;\n\t\t\t\tconst expanded = this._expanded.has(id);\n\t\t\t\tconst pretty = esc(r.pretty);\n\t\t\t\tconst preview = esc(r.preview);\n\t\t\t\treturn `\n\t\t\t\t\t<div class=\"row${expanded ? \" expanded\" : \"\"}\" data-id=\"${esc(id)}\">\n\t\t\t\t\t\t<div class=\"c-ns\" title=\"${esc(r.ns)}\">${esc(r.ns)}</div>\n\t\t\t\t\t\t<div class=\"c-key\" title=\"${esc(r.key)}\">${esc(r.key)}</div>\n\t\t\t\t\t\t<div class=\"c-scope\" title=\"${esc(r.scope)}\">${esc(r.scope)}</div>\n\t\t\t\t\t\t<div class=\"c-vis\" title=\"${esc(r.visible)}\">${esc(r.visible)}</div>\n\t\t\t\t\t\t<div class=\"c-val\">\n\t\t\t\t\t\t\t<div class=\"val-preview\" title=\"${preview}\">\n\t\t\t\t\t\t\t\t<code>${preview}</code>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"val-expand\">\n\t\t\t\t\t\t\t\t<div class=\"val-toolbar\">\n\t\t\t\t\t\t\t\t\t<button type=\"button\" class=\"btn-copy\" data-copy=\"${pretty}\">Copy</button>\n\t\t\t\t\t\t\t\t\t<button type=\"button\" class=\"btn-collapse\">Collapse</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<pre class=\"val-pre\">${pretty}</pre>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t`;\n\t\t\t}).join(\"\");\n\t\t}\n\n\t\tasync _renderHTML() {\n\t\t\tthis._prepareRows();\n\n\t\t\tconst cols = \"grid-template-columns: minmax(160px,1.1fr) minmax(200px,1.3fr) 0.6fr 0.7fr minmax(260px,1.8fr);\";\n\n\t\t\tconst css =\n\t\t\t\t`#${this.id} .window-content{display:flex;flex-direction:column;padding:.5rem !important}` +\n\t\t\t\t`#${this.id} section.bbmm-preset-inspector{display:flex;flex:1 1 auto;min-height:0}` +\n\t\t\t\t`.bbmm-inspector-root{display:flex;flex-direction:column;flex:1 1 auto;min-height:0;gap:.5rem}` +\n\t\t\t\t`.bbmm-toolbar{display:flex;gap:.5rem;align-items:center}` +\n\t\t\t\t`.bbmm-toolbar input{flex:1}` +\n\n\t\t\t\t`.bbmm-grid-head{display:grid;${cols}gap:0;border:1px solid var(--color-border,#444);border-radius:.5rem .5rem 0 0;background:var(--color-bg-header,#1e1e1e)}` +\n\t\t\t\t`.bbmm-grid-head .h{padding:.35rem .5rem;border-bottom:1px solid #444;font-weight:600}` +\n\t\t\t\t`.bbmm-grid-head .sortable{cursor:pointer;user-select:none}` +\n\n\t\t\t\t`.bbmm-grid-body{display:block;flex:1 1 auto;min-height:0;max-height:100%;overflow:auto;border:1px solid var(--color-border,#444);border-top:0;border-radius:0 0 .5rem .5rem}` +\n\t\t\t\t`.bbmm-grid-body .row{display:grid;${cols}gap:0;border-bottom:1px solid #333}` +\n\t\t\t\t`.bbmm-grid-body .row>div{padding:.3rem .5rem;min-width:0}` +\n\n\t\t\t\t`.bbmm-grid-body .c-val .val-preview{max-height:2.4em;overflow:hidden;display:-webkit-box;-webkit-line-clamp:2;-webkit-box-orient:vertical;white-space:normal}` +\n\t\t\t\t`.bbmm-grid-body .c-val .val-preview code{white-space:pre-wrap;word-break:break-word}` +\n\t\t\t\t`.bbmm-grid-body .c-val{cursor:pointer}` +\n\n\t\t\t\t`.bbmm-grid-body .row .val-expand{display:none;grid-column:5 / 6;margin-top:.25rem;border-top:1px dotted #444;padding-top:.25rem}` +\n\t\t\t\t`.bbmm-grid-body .row.expanded .val-expand{display:block}` +\n\t\t\t\t`.bbmm-grid-body .val-toolbar{display:flex;gap:.5rem;margin-bottom:.25rem}` +\n\t\t\t\t`.bbmm-grid-body .val-toolbar .btn-copy,.bbmm-grid-body .val-toolbar .btn-collapse{padding:.15rem .4rem;border:1px solid var(--color-border,#555);background:rgba(255,255,255,.05);border-radius:.35rem}` +\n\t\t\t\t`.bbmm-grid-body .val-pre{max-height:40vh;overflow:auto;margin:0;background:rgba(255,255,255,.03);padding:.4rem;border-radius:.35rem}` +\n\n\t\t\t\t`.bbmm-grid-body .row>div:not(.c-val){overflow:hidden;text-overflow:ellipsis;white-space:nowrap}`;\n\n\t\t\tconst head =\n\t\t\t\t`<div class=\"bbmm-grid-head\" id=\"bbmm-preset-head\">` +\n\t\t\t\t\tthis._renderHeader() +\n\t\t\t\t`</div>`;\n\n\t\t\tconst body =\n\t\t\t\t`<div class=\"bbmm-grid-body\" id=\"bbmm-preset-body\">` +\n\t\t\t\t\tthis._renderRows() +\n\t\t\t\t`</div>`;\n\n\t\t\treturn (\n\t\t\t\t`<style>${css}</style>` +\n\t\t\t\t`<div class=\"bbmm-inspector-root\">` +\n\t\t\t\t\t`<div class=\"bbmm-toolbar\">` +\n\t\t\t\t\t\t`<input id=\"bbmm-preset-filter\" type=\"text\" placeholder=\"Search namespace, key, scope, visibility, value…\" value=\"${esc(this.filter ?? \"\")}\" />` +\n\t\t\t\t\t\t`<span class=\"count\">Showing <span id=\"bbmm-preset-count\">${this.rows.length}</span> of ${this.itemsAll.length}</span>` +\n\t\t\t\t\t`</div>` +\n\t\t\t\t\thead +\n\t\t\t\t\tbody +\n\t\t\t\t`</div>`\n\t\t\t);\n\t\t}\n\n\t\tasync _replaceHTML(result, _options) {\n\t\t\tconst contentRegion = this.element.querySelector(\".window-content\") || this.element;\n\t\t\tcontentRegion.style.display = \"flex\";\n\t\t\tcontentRegion.style.flexDirection = \"column\";\n\t\t\tcontentRegion.style.height = \"100%\";\n\t\t\tcontentRegion.style.minHeight = \"0\";\n\n\t\t\ttry {\n\t\t\t\tconst winEl = this.element;\n\t\t\t\twinEl.style.minWidth = \"500px\";\n\t\t\t\twinEl.style.maxWidth = \"1200px\";\n\t\t\t\twinEl.style.minHeight = \"400px\";\n\t\t\t\twinEl.style.maxHeight = \"700px\";\n\t\t\t\twinEl.style.overflow = \"hidden\";\n\t\t\t\tlog(1, \"BBMMPresetInspector: applied size clamps.\");\n\t\t\t} catch (e) {\n\t\t\t\tlog(2, \"BBMMPresetInspector: failed to apply size clamps\", e);\n\t\t\t}\n\n\t\t\tcontentRegion.innerHTML = result;\n\t\t\tthis._root = contentRegion;\n\n\t\t\tif (this._delegated) {\n\t\t\t\tthis._rerender();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._delegated = true;\n\n\t\t\tconst root = this._root;\n\n\t\t\t// Sorting\n\t\t\troot.addEventListener(\"click\", (ev) => {\n\t\t\t\tconst h = ev.target.closest?.(\".bbmm-grid-head .sortable\");\n\t\t\t\tif (!h) return;\n\t\t\t\tconst k = h.dataset.sort;\n\t\t\t\tif (!k) return;\n\t\t\t\tif (this.sortKey === k) this.sortDir = (this.sortDir === \"asc\" ? \"desc\" : \"asc\");\n\t\t\t\telse { this.sortKey = k; this.sortDir = \"asc\"; }\n\t\t\t\tthis._prepareRows();\n\t\t\t\tthis._rerender();\n\t\t\t});\n\n\t\t\t// Value toggle + copy\n\t\t\troot.addEventListener(\"click\", async (ev) => {\n\t\t\t\tconst copyBtn = ev.target.closest?.(\".btn-copy\");\n\t\t\t\tif (copyBtn) {\n\t\t\t\t\tconst txt = copyBtn.getAttribute(\"data-copy\") ?? \"\";\n\t\t\t\t\ttry { await navigator.clipboard.writeText(txt); ui.notifications.info(\"Copied value to clipboard.\"); }\n\t\t\t\t\tcatch { ui.notifications.warn(\"Clipboard copy failed.\"); }\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst collapseBtn = ev.target.closest?.(\".btn-collapse\");\n\t\t\t\tif (collapseBtn) {\n\t\t\t\t\tconst row = collapseBtn.closest?.(\".row\");\n\t\t\t\t\tif (!row) return;\n\t\t\t\t\trow.classList.remove(\"expanded\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst valCell = ev.target.closest?.(\".c-val\");\n\t\t\t\tif (!valCell) return;\n\t\t\t\tconst row = valCell.closest?.(\".row\");\n\t\t\t\tif (!row) return;\n\t\t\t\tconst id = row.getAttribute(\"data-id\") || \"\";\n\t\t\t\tif (row.classList.contains(\"expanded\")) {\n\t\t\t\t\trow.classList.remove(\"expanded\");\n\t\t\t\t\tthis._expanded.delete(id);\n\t\t\t\t} else {\n\t\t\t\t\trow.classList.add(\"expanded\");\n\t\t\t\t\tthis._expanded.add(id);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Live filter (debounced)\n\t\t\tlet _debTimer = null;\n\t\t\tconst inputEl = root.querySelector(\"#bbmm-preset-filter\");\n\t\t\tinputEl?.addEventListener(\"input\", (ev) => {\n\t\t\t\tconst val = ev.currentTarget.value ?? \"\";\n\t\t\t\tclearTimeout(_debTimer);\n\t\t\t\t_debTimer = setTimeout(() => {\n\t\t\t\t\tthis.filter = val;\n\t\t\t\t\tthis._prepareRows();\n\t\t\t\t\tthis._rerender();\n\t\t\t\t}, 150);\n\t\t\t}, { passive: true });\n\n\t\t\ttry { this.setPosition({ height: \"auto\", left: null, top: null }); } catch {}\n\t\t}\n\n\t\t_rerender() {\n\t\t\tconst root = this._root;\n\t\t\tif (!root) return;\n\t\t\tconst head = root.querySelector(\"#bbmm-preset-head\");\n\t\t\tconst body = root.querySelector(\"#bbmm-preset-body\");\n\t\t\tconst count = root.querySelector(\"#bbmm-preset-count\");\n\t\t\tif (head) head.innerHTML = this._renderHeader();\n\t\t\tif (body) body.innerHTML = this._renderRows();\n\t\t\tif (count) count.textContent = String(this.rows.length);\n\t\t}\n\t}\n\n\t// -------------------------------------------------------------------------\n\t// Picker dialog: choose a preset, open inspector\n\t// -------------------------------------------------------------------------\n\tfunction openPresetInspectLauncher() {\n\t\tconst presetsMap = getAllSettingsPresets();\n\t\tconst names = Object.keys(presetsMap).sort((a,b)=>a.localeCompare(b));\n\t\tif (!names.length) { ui.notifications.warn(\"No BBMM settings presets found.\"); return; }\n\t\tconst options = names.map(n => `<option value=\"${esc(n)}\">${esc(n)}</option>`).join(\"\");\n\n\t\tconst content = `\n\t\t\t<div style=\"min-width:420px;display:flex;flex-direction:column;gap:.75rem;\">\n\t\t\t\t<div style=\"display:flex;gap:.5rem;align-items:center;\">\n\t\t\t\t\t<label style=\"min-width:9rem;\">Settings Preset</label>\n\t\t\t\t\t<select name=\"presetName\" style=\"flex:1;\">${options}</select>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`;\n\n\t\tconst dlg = new foundry.applications.api.DialogV2({\n\t\t\twindow: { title: \"BBMM — Inspect Settings Preset\", resizable: true },\n\t\t\tposition: { width: 1200, height: \"auto\" },\n\t\t\tcontent,\n\t\t\tbuttons: [\n\t\t\t\t{ action: \"inspect\", label: \"Inspect\", default: true },\n\t\t\t\t{ action: \"cancel\", label: \"Cancel\" }\n\t\t\t],\n\t\t\tsubmit: (ctx) => ctx.action\n\t\t});\n\n\t\tconst onRender = (app) => {\n\t\t\tif (app !== dlg) return;\n\t\t\tHooks.off(\"renderDialogV2\", onRender);\n\n\t\t\ttry {\n\t\t\t\tconst el = app.element;\n\t\t\t\tel.style.minWidth = \"420px\";\n\t\t\t\tel.style.maxWidth = \"600px\";\n\t\t\t\tel.style.maxHeight = \"600px\";\n\t\t\t\tel.style.overflow = \"hidden\";\n\t\t\t\tlog(1, \"BBMM Preset Picker: applied size clamps.\");\n\t\t\t} catch (e) {\n\t\t\t\tlog(2, \"BBMM Preset Picker: failed to apply size clamps\", e);\n\t\t\t}\n\n\t\t\ttry { dlg.setPosition({ height: \"auto\", left: null, top: null }); } catch {}\n\n\t\t\tconst form = app.element?.querySelector(\"form\");\n\t\t\tif (!form) return;\n\t\t\tform.querySelectorAll(\"button\").forEach(b => b.setAttribute(\"type\", \"button\"));\n\n\t\t\tform.addEventListener(\"click\", (ev) => {\n\t\t\t\tconst btn = ev.target.closest?.(\"button\");\n\t\t\t\tif (!(btn instanceof HTMLButtonElement)) return;\n\t\t\t\tconst action = btn.dataset.action || \"\";\n\t\t\t\tif (![\"inspect\",\"cancel\"].includes(action)) return;\n\t\t\t\tev.preventDefault();\n\t\t\t\tif (action === \"cancel\") { app.close(); return; }\n\n\t\t\t\tconst sel = /** @type {HTMLSelectElement} */ (form.elements.namedItem(\"presetName\"));\n\t\t\t\tconst presetName = sel?.value;\n\t\t\t\tif (!presetName) { ui.notifications.warn(\"Select a settings preset.\"); return; }\n\n\t\t\t\tconst preset = presetsMap[presetName] ?? {};\n\t\t\t\tconst items = toPresetItems(preset);\n\t\t\t\tif (!items.length) {\n\t\t\t\t\tui.notifications.error(\"Preset is malformed or has no items.\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tapp.close();\n\t\t\t\tnew BBMMPresetInspector({ name: presetName, items }).render(true);\n\t\t\t});\n\t\t};\n\t\tHooks.on(\"renderDialogV2\", onRender);\n\n\t\tdlg.render(true);\n\t}\n\n\t// -------------------------------------------------------------------------\n\t// Launch\n\t// -------------------------------------------------------------------------\n\topenPresetInspectLauncher();\n})();",
  "img": "icons/tools/scribal/magnifying-glass.webp",
  "author": "EpqDCtSCbVNM4wPj",
  "scope": "global",
  "folder": null,
  "ownership": {
    "default": 0,
    "EpqDCtSCbVNM4wPj": 3
  },
  "_stats": {
    "compendiumSource": null,
    "duplicateSource": null,
    "exportSource": null,
    "coreVersion": "13.348",
    "systemId": "pf2e",
    "systemVersion": "7.4.1",
    "createdTime": 1756038416051,
    "modifiedTime": 1758040837183,
    "lastModifiedBy": "EpqDCtSCbVNM4wPj"
  },
  "_id": "sc6d0g6syYz3nEbB",
  "sort": 300000,
  "_key": "!macros!sc6d0g6syYz3nEbB"
}
