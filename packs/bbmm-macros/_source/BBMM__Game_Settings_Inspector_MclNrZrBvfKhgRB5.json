{
  "name": "BBMM: Game Settings Inspector",
  "type": "script",
  "author": "EpqDCtSCbVNM4wPj",
  "img": "icons/commodities/tech/cog-brass.webp",
  "scope": "global",
  "command": "(async () => {\n\t// =========================================================================\n\t// BBMM Namespace Settings Inspector\n\t// - Blank start (no settings loaded)\n\t// - Namespace dropdown (150px)\n\t// - On namespace select: load that namespace only (progress + cancel)\n\t// - Debounced auto filter (800ms) on the text box\n\t// - Batched rendering (200 rows) + lazy pretty on expand\n\t// =========================================================================\n\n\tconst DEBOUNCE_MS = 800;\n\tconst BATCH_SIZE = 200;\n\n\t// -------------------------------------------------------------------------\n\t// Logging helper (DL preferred)\n\t// -------------------------------------------------------------------------\n\tconst log = (...a) => { try { if (typeof DL === \"function\") return DL(...a); if (typeof debugLog === \"function\") return debugLog(...a); } catch {} };\n\n\t// -------------------------------------------------------------------------\n\t// Helpers\n\t// -------------------------------------------------------------------------\n\tfunction esc(s) {\n\t\treturn String(s ?? \"\")\n\t\t\t.replaceAll(\"&\",\"&amp;\")\n\t\t\t.replaceAll(\"<\",\"&lt;\")\n\t\t\t.replaceAll(\">\",\"&gt;\")\n\t\t\t.replaceAll('\"',\"&quot;\");\n\t}\n\tfunction toPreview(v) {\n\t\ttry {\n\t\t\tif (v === undefined) return \"undefined\";\n\t\t\tif (v === null) return \"null\";\n\t\t\tif (typeof v === \"string\") return v;\n\t\t\tif (typeof v === \"number\" || typeof v === \"boolean\") return String(v);\n\t\t\treturn JSON.stringify(v);\n\t\t} catch { return String(v); }\n\t}\n\tfunction toPretty(v) {\n\t\ttry {\n\t\t\tif (typeof v === \"string\") {\n\t\t\t\ttry { return JSON.stringify(JSON.parse(v), null, 2); }\n\t\t\t\tcatch { return v; }\n\t\t\t}\n\t\t\treturn JSON.stringify(v, null, 2);\n\t\t} catch { return String(v); }\n\t}\n\n\t// -------------------------------------------------------------------------\n\t// Tiny loading dialog (DialogV2) with progress + Cancel\n\t// -------------------------------------------------------------------------\n\tfunction createLoader({ title = \"BBMM — Loading\", label = \"Loading…\", total = 0 } = {}) {\n\t\tlet aborted = false;\n\n\t\tconst content = `\n\t\t\t<style>\n\t\t\t\t.bbmm-load-wrap{display:flex;flex-direction:column;gap:.5rem;min-width:320px}\n\t\t\t\t.bbmm-load-row{display:flex;justify-content:space-between;gap:.5rem}\n\t\t\t\t.bbmm-bar{height:10px;border:1px solid var(--color-border,#555);border-radius:6px;overflow:hidden;background:rgba(255,255,255,.05)}\n\t\t\t\t.bbmm-fill{height:100%;width:0%;}\n\t\t\t</style>\n\t\t\t<div class=\"bbmm-load-wrap\">\n\t\t\t\t<div class=\"bbmm-load-row\">\n\t\t\t\t\t<div><strong>${esc(label)}</strong></div>\n\t\t\t\t\t<div><span id=\"bbmm-pct\">0%</span></div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"bbmm-bar\"><div id=\"bbmm-fill\" class=\"bbmm-fill\"></div></div>\n\t\t\t\t<div id=\"bbmm-status\" style=\"opacity:.8;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;\"></div>\n\t\t\t</div>\n\t\t`;\n\n\t\tconst dlg = new foundry.applications.api.DialogV2({\n\t\t\twindow: { title, resizable: false },\n\t\t\tposition: { width: \"auto\", height: \"auto\" },\n\t\t\tcontent,\n\t\t\tbuttons: [{ action: \"cancel\", label: \"Cancel\", default: false }],\n\t\t\tsubmit: (ctx) => ctx.action\n\t\t});\n\n\t\tconst onRender = (app) => {\n\t\t\tif (app !== dlg) return;\n\t\t\tHooks.off(\"renderDialogV2\", onRender);\n\t\t\ttry {\n\t\t\t\tconst el = app.element;\n\t\t\t\tel.style.maxWidth = \"520px\";\n\t\t\t\tel.style.overflow = \"hidden\";\n\t\t\t\tdlg.setPosition({ height: \"auto\", left: null, top: null });\n\t\t\t} catch {}\n\t\t\ttry {\n\t\t\t\tconst form = app.element?.querySelector(\"form\");\n\t\t\t\tform?.querySelectorAll(\"button\").forEach(b => b.setAttribute(\"type\", \"button\"));\n\t\t\t\tform?.addEventListener(\"click\", (ev) => {\n\t\t\t\t\tconst btn = ev.target.closest?.(\"button\");\n\t\t\t\t\tif (!(btn instanceof HTMLButtonElement)) return;\n\t\t\t\t\tif ((btn.dataset.action || \"\") !== \"cancel\") return;\n\t\t\t\t\taborted = true;\n\t\t\t\t\ttry { dlg.close(); } catch {}\n\t\t\t\t});\n\t\t\t} catch {}\n\t\t};\n\t\tHooks.on(\"renderDialogV2\", onRender);\n\t\tdlg.render(true);\n\n\t\tfunction setPct(pct) {\n\t\t\tconst p = Math.max(0, Math.min(100, Math.round(pct)));\n\t\t\tconst elPct = dlg.element?.querySelector?.(\"#bbmm-pct\");\n\t\t\tconst elFill = dlg.element?.querySelector?.(\"#bbmm-fill\");\n\t\t\tif (elPct) elPct.textContent = `${p}%`;\n\t\t\tif (elFill) {\n\t\t\t\telFill.style.width = `${p}%`;\n\t\t\t\telFill.style.background = p < 100 ? \"var(--color-text,#bbb)\" : \"var(--color-positive,#5fbf7f)\";\n\t\t\t}\n\t\t}\n\t\tfunction setStatus(txt) {\n\t\t\tconst el = dlg.element?.querySelector?.(\"#bbmm-status\");\n\t\t\tif (el) el.textContent = String(txt ?? \"\");\n\t\t}\n\n\t\treturn {\n\t\t\tupdate(i, tot, status = \"\") {\n\t\t\t\tconst pct = tot > 0 ? (i / tot) * 100 : 0;\n\t\t\t\tsetPct(pct);\n\t\t\t\tif (status) setStatus(status);\n\t\t\t},\n\t\t\tisAborted() { return aborted; },\n\t\t\tclose() { try { dlg.close(); } catch {} }\n\t\t};\n\t}\n\n\t// -------------------------------------------------------------------------\n\t// Collect settings for a single namespace (fast, with progress)\n\t// -------------------------------------------------------------------------\n\tasync function collectNamespace(ns) {\n\t\tconst out = [];\n\t\tif (!ns) return out;\n\n\t\t// Build a list of keys in this namespace without touching values yet\n\t\tlet entries = [];\n\t\ttry {\n\t\t\tfor (const [fullKey, cfg] of game.settings.settings.entries()) {\n                const idx = fullKey.indexOf(\".\");\n                if (idx <= 0) continue;\n                const nsKey = fullKey.slice(0, idx);\n                if (nsKey !== ns) continue;\n                const key = fullKey.slice(idx + 1);\n                entries.push([key, cfg]);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlog(3, `collectNamespace(${ns}): unable to read settings map`, e);\n\t\t\treturn out;\n\t\t}\n\n\t\tconst loader = createLoader({ title: \"BBMM — Loading Namespace\", label: `Loading \"${ns}\"…`, total: entries.length });\n\t\tconst sleep = (ms) => new Promise(r => setTimeout(r, ms));\n\n\t\tfor (let i = 0; i < entries.length; i++) {\n\t\t\tif (loader.isAborted()) { log(2, \"collectNamespace: cancelled by user\"); out.length = 0; break; }\n\t\t\tconst [key, cfg] = entries[i];\n\n\t\t\tlet value;\n\t\t\ttry { value = game.settings.get(ns, key); }\n\t\t\tcatch (e) { value = { \"_bbmm_error\": `Failed to read value: ${e?.message || e}` }; }\n\n\t\t\tconst scope = String(cfg?.scope ?? \"\");\n\t\t\tconst config = !!cfg?.config;\n\t\t\tconst preview = toPreview(value);\n\n\t\t\tout.push({\n\t\t\t\tnamespace: ns,\n\t\t\t\tkey,\n\t\t\t\tvalue,\n\t\t\t\tscope,\n\t\t\t\tconfig,\n\t\t\t\t__lc: {\n\t\t\t\t\tkey: String(key ?? \"\").toLowerCase(),\n\t\t\t\t\tscope: scope.toLowerCase(),\n\t\t\t\t\tvisible: (config ? \"config\" : \"hidden\"),\n\t\t\t\t\tpreview: String(preview ?? \"\").toLowerCase()\n\t\t\t\t},\n\t\t\t\t__preview: preview\n\t\t\t});\n\n\t\t\tif ((i % 20) === 0 || i === entries.length - 1) {\n\t\t\t\tloader.update(i + 1, entries.length, `${ns}.${key}`);\n\t\t\t\tawait sleep(0);\n\t\t\t}\n\t\t}\n\n\t\tloader.close();\n\t\treturn out;\n\t}\n\n\t// -------------------------------------------------------------------------\n\t// UI (ApplicationV2)\n\t// -------------------------------------------------------------------------\n\tclass BBMMNamespaceInspector extends foundry.applications.api.ApplicationV2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: `bbmm-namespace-inspector`,\n\t\t\t\twindow: { title: `BBMM — Inspect Namespace Settings` },\n\t\t\t\twidth: 1200,\n\t\t\t\theight: 600,\n\t\t\t\tresizable: true\n\t\t\t});\n\n\t\t\t// Gather namespaces (cheap: names only, no values)\n\t\t\tthis.namespaces = (() => {\n\t\t\t\tconst set = new Set();\n\t\t\t\tfor (const [fullKey] of game.settings.settings.entries()) {\n\t\t\t\t\tconst idx = fullKey.indexOf(\".\");\n\t\t\t\t\tif (idx > 0) set.add(fullKey.slice(0, idx));\n\t\t\t\t}\n\t\t\t\treturn Array.from(set).sort((a,b)=>a.localeCompare(b));\n\t\t\t})();\n\n\t\t\tthis.nsSelected = \"\"; // start blank: nothing loaded\n\t\t\tthis.items = [];      // current namespace items\n\t\t\tthis.filter = \"\";\n\t\t\tthis.sortKey = \"key\";\n\t\t\tthis.sortDir = \"asc\";\n\n\t\t\t// value map (for lazy pretty) — filled after load\n\t\t\tthis._valueById = new Map();\n\n\t\t\t// batching\n\t\t\tthis._matchRows = [];\n\t\t\tthis._renderedCount = 0;\n\t\t}\n\n\t\t_makeRow(e) {\n\t\t\treturn {\n\t\t\t\tns: e.namespace,\n\t\t\t\tkey: e.key ?? \"\",\n\t\t\t\tscope: e.scope ?? \"\",\n\t\t\t\tvisible: e.config ? \"config\" : \"hidden\",\n\t\t\t\tpreview: e.__preview,\n\t\t\t\t_valueId: `${e.namespace}::${e.key}`,\n\t\t\t\t__lc: e.__lc\n\t\t\t};\n\t\t}\n\n\t\t_runFilter() {\n\t\t\tconst q = String(this.filter ?? \"\").trim().toLowerCase();\n\t\t\tlet list = this.items;\n\n\t\t\tif (q) {\n\t\t\t\tlist = list.filter(e =>\n\t\t\t\t\te.__lc.key.includes(q) ||\n\t\t\t\t\te.__lc.preview.includes(q) ||\n\t\t\t\t\te.__lc.scope.includes(q) ||\n\t\t\t\t\te.__lc.visible.includes(q)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst dir = this.sortDir === \"asc\" ? 1 : -1;\n\t\t\tconst cmp = (a, b) => String(a ?? \"\").localeCompare(String(b ?? \"\"));\n\t\t\tlist = [...list].sort((a, b) => {\n\t\t\t\tif (this.sortKey === \"key\") return (cmp(a.key, b.key)) * dir;\n\t\t\t\tif (this.sortKey === \"scope\") return (cmp(a.scope, b.scope) || cmp(a.key, b.key)) * dir;\n\t\t\t\tif (this.sortKey === \"visible\") {\n\t\t\t\t\tconst av = a.config ? \"config\" : \"hidden\";\n\t\t\t\t\tconst bv = b.config ? \"config\" : \"hidden\";\n\t\t\t\t\treturn (cmp(av, bv) || cmp(a.key, b.key)) * dir;\n\t\t\t\t}\n\t\t\t\t// default key\n\t\t\t\treturn (cmp(a.key, b.key)) * dir;\n\t\t\t});\n\n\t\t\tthis._matchRows = list.map(e => this._makeRow(e));\n\t\t\tthis._renderedCount = 0;\n\t\t}\n\n\t\t_renderHeader() {\n\t\t\tconst arrow = (k) => this.sortKey !== k ? \"\" : (this.sortDir === \"asc\" ? \" ▲\" : \" ▼\");\n\t\t\treturn (\n\t\t\t\t`<div class=\"h c-key sortable\" data-sort=\"key\">Key${arrow(\"key\")}</div>` +\n\t\t\t\t`<div class=\"h c-scope sortable\" data-sort=\"scope\">Scope${arrow(\"scope\")}</div>` +\n\t\t\t\t`<div class=\"h c-vis sortable\" data-sort=\"visible\">Visibility${arrow(\"visible\")}</div>` +\n\t\t\t\t`<div class=\"h c-val\">Value</div>`\n\t\t\t);\n\t\t}\n\n\t\t_rowHTML(r) {\n\t\t\tconst id = `${r.ns}::${r.key}`;\n\t\t\tconst preview = esc(r.preview);\n\t\t\treturn `\n\t\t\t\t<div class=\"row\" data-id=\"${esc(id)}\">\n\t\t\t\t\t<div class=\"c-key\" title=\"${esc(r.key)}\">${esc(r.key)}</div>\n\t\t\t\t\t<div class=\"c-scope\" title=\"${esc(r.scope)}\">${esc(r.scope)}</div>\n\t\t\t\t\t<div class=\"c-vis\" title=\"${esc(r.visible)}\">${esc(r.visible)}</div>\n\t\t\t\t\t<div class=\"c-val\">\n\t\t\t\t\t\t<div class=\"val-preview\" title=\"${preview}\"><code>${preview}</code></div>\n\t\t\t\t\t\t<div class=\"val-expand\">\n\t\t\t\t\t\t\t<div class=\"val-toolbar\">\n\t\t\t\t\t\t\t\t<button type=\"button\" class=\"btn-copy\">Copy</button>\n\t\t\t\t\t\t\t\t<button type=\"button\" class=\"btn-collapse\">Collapse</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<pre class=\"val-pre\" data-loaded=\"0\"></pre>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>`;\n\t\t}\n\n\t\t_buildToolbarHTML() {\n\t\t\tconst nsOptions = ['<option value=\"\"></option>']\n\t\t\t\t.concat(this.namespaces.map(ns => `<option value=\"${esc(ns)}\"${ns===this.nsSelected?' selected':''}>${esc(ns)}</option>`))\n\t\t\t\t.join(\"\");\n\t\t\treturn (\n\t\t\t\t`<div class=\"bbmm-toolbar\">` +\n\t\t\t\t\t`<select id=\"bbmm-namespace\" title=\"Namespace\">${nsOptions}</select>` +\n\t\t\t\t\t`<input id=\"bbmm-filter\" type=\"text\" placeholder=\"Search…\" value=\"${esc(this.filter ?? \"\")}\" />` +\n\t\t\t\t\t`<span class=\"count\">Showing <span id=\"bbmm-count\">0</span> of <span id=\"bbmm-total\">0</span></span>` +\n\t\t\t\t`</div>`\n\t\t\t);\n\t\t}\n\n\t\tasync _renderHTML() {\n\t\t\tconst cols = \"grid-template-columns: minmax(220px,1.4fr) 0.8fr 0.8fr minmax(280px,2fr);\";\n\t\t\tconst css =\n\t\t\t\t`#${this.id} .window-content{display:flex;flex-direction:column;padding:.5rem !important}` +\n\t\t\t\t`.bbmm-inspector-root{display:flex;flex-direction:column;flex:1 1 auto;min-height:0;gap:.5rem}` +\n\t\t\t\t`.bbmm-toolbar{display:flex;gap:.5rem;align-items:center;flex-wrap:nowrap}` +\n\t\t\t\t`.bbmm-toolbar select{width:150px;min-width:150px;max-width:150px}` +\n\t\t\t\t`.bbmm-toolbar input[type=\"text\"]{flex:1;min-width:260px}` +\n\t\t\t\t`.bbmm-grid-head{display:grid;${cols}gap:0;border:1px solid var(--color-border,#444);border-radius:.5rem .5rem 0 0;background:var(--color-bg-header,#1e1e1e)}` +\n\t\t\t\t`.bbmm-grid-head .h{padding:.35rem .5rem;border-bottom:1px solid #444;font-weight:600}` +\n\t\t\t\t`.bbmm-grid-head .sortable{cursor:pointer;user-select:none}` +\n\t\t\t\t`.bbmm-grid-body{display:block;flex:1 1 auto;min-height:0;max-height:100%;overflow:auto;border:1px solid var(--color-border,#444);border-top:0;border-radius:0 0 .5rem .5rem}` +\n\t\t\t\t`.bbmm-grid-body .row{display:grid;${cols}gap:0;border-bottom:1px solid #333}` +\n\t\t\t\t`.bbmm-grid-body .row>div{padding:.3rem .5rem;min-width:0}` +\n\t\t\t\t`.bbmm-grid-body .c-val .val-preview{max-height:2.4em;overflow:hidden;display:-webkit-box;-webkit-line-clamp:2;-webkit-box-orient:vertical;white-space:normal}` +\n\t\t\t\t`.bbmm-grid-body .c-val .val-preview code{white-space:pre-wrap;word-break:break-word}` +\n\t\t\t\t`.bbmm-grid-body .c-val{cursor:pointer}` +\n\t\t\t\t`.bbmm-grid-body .row .val-expand{display:none;grid-column:4 / 5;margin-top:.25rem;border-top:1px dotted #444;padding-top:.25rem}` +\n\t\t\t\t`.bbmm-grid-body .row.expanded .val-expand{display:block}` +\n\t\t\t\t`.bbmm-grid-body .val-toolbar{display:flex;gap:.5rem;margin-bottom:.25rem}` +\n\t\t\t\t`.bbmm-grid-body .val-pre{max-height:40vh;overflow:auto;margin:0;background:rgba(255,255,255,.03);padding:.4rem;border-radius:.35rem}`;\n\n\t\t\tconst head = `<div class=\"bbmm-grid-head\" id=\"bbmm-head\">${this._renderHeader()}</div>`;\n\t\t\tconst body = `<div class=\"bbmm-grid-body\" id=\"bbmm-body\"></div>`;\n\n\t\t\treturn (\n\t\t\t\t`<style>${css}</style>` +\n\t\t\t\t`<div class=\"bbmm-inspector-root\">` +\n\t\t\t\t\tthis._buildToolbarHTML() +\n\t\t\t\t\thead +\n\t\t\t\t\tbody +\n\t\t\t\t`</div>`\n\t\t\t);\n\t\t}\n\n\t\tasync _replaceHTML(result, _options) {\n\t\t\tconst content = this.element.querySelector(\".window-content\") || this.element;\n\t\t\tObject.assign(content.style, { display:\"flex\", flexDirection:\"column\", height:\"100%\", minHeight:\"0\" });\n\n\t\t\ttry {\n\t\t\t\tconst winEl = this.element;\n\t\t\t\twinEl.style.minWidth = \"500px\";\n\t\t\t\twinEl.style.maxWidth = \"1200px\";\n\t\t\t\twinEl.style.minHeight = \"400px\";\n\t\t\t\twinEl.style.maxHeight = \"700px\";\n\t\t\t\twinEl.style.overflow = \"hidden\";\n\t\t\t\tlog(1, \"NamespaceInspector: size clamps applied\");\n\t\t\t} catch (e) { log(2, \"NamespaceInspector: size clamps failed\", e); }\n\n\t\t\tcontent.innerHTML = result;\n\t\t\tthis._root = content;\n\t\t\tif (this._delegated) return;\n\t\t\tthis._delegated = true;\n\n\t\t\tconst root = this._root;\n\t\t\tconst bodyEl  = root.querySelector(\"#bbmm-body\");\n\t\t\tconst headEl  = root.querySelector(\"#bbmm-head\");\n\t\t\tconst countEl = root.querySelector(\"#bbmm-count\");\n\t\t\tconst totalEl = root.querySelector(\"#bbmm-total\");\n\t\t\tconst inputEl = root.querySelector(\"#bbmm-filter\");\n\t\t\tconst selNs   = root.querySelector(\"#bbmm-namespace\");\n\n\t\t\t// Render helpers ----------------------------------------------------\n\t\t\tconst renderNextBatch = () => {\n\t\t\t\tconst start = this._renderedCount;\n\t\t\t\tconst end = Math.min(start + BATCH_SIZE, this._matchRows.length);\n\t\t\t\tif (start >= end) return;\n\t\t\t\tconst frag = document.createDocumentFragment();\n\t\t\t\tfor (let i = start; i < end; i++) {\n\t\t\t\t\tconst div = document.createElement(\"div\");\n\t\t\t\t\tdiv.innerHTML = this._rowHTML(this._matchRows[i]);\n\t\t\t\t\tfrag.appendChild(div.firstElementChild);\n\t\t\t\t}\n\t\t\t\tbodyEl.appendChild(frag);\n\t\t\t\tthis._renderedCount = end;\n\t\t\t\tif (countEl) countEl.textContent = String(this._renderedCount);\n\t\t\t\tif (totalEl) totalEl.textContent = String(this._matchRows.length);\n\t\t\t};\n\n\t\t\tconst resetAndRender = () => {\n                bodyEl.innerHTML = \"\";\n\t\t\t\tthis._renderedCount = 0;\n\t\t\t\trenderNextBatch();\n\t\t\t};\n\n\t\t\t// Initially blank\n\t\t\tif (countEl) countEl.textContent = \"0\";\n\t\t\tif (totalEl) totalEl.textContent = \"0\";\n\n\t\t\t// Infinite scroll\n\t\t\tlet ticking = false;\n\t\t\tbodyEl.addEventListener(\"scroll\", () => {\n\t\t\t\tif (ticking) return; ticking = true;\n\t\t\t\trequestAnimationFrame(() => {\n\t\t\t\t\tticking = false;\n\t\t\t\t\tconst nearBottom = bodyEl.scrollTop + bodyEl.clientHeight >= bodyEl.scrollHeight - 200;\n\t\t\t\t\tif (nearBottom) renderNextBatch();\n\t\t\t\t});\n\t\t\t}, { passive: true });\n\n\t\t\t// Sorting\n\t\t\troot.addEventListener(\"click\", (ev) => {\n\t\t\t\tconst h = ev.target.closest?.(\".bbmm-grid-head .sortable\");\n\t\t\t\tif (!h) return;\n\t\t\t\tconst k = h.dataset.sort;\n\t\t\t\tif (!k) return;\n\t\t\t\tif (this.sortKey === k) this.sortDir = (this.sortDir === \"asc\" ? \"desc\" : \"asc\");\n\t\t\t\telse { this.sortKey = k; this.sortDir = \"asc\"; }\n\t\t\t\tthis._runFilter();\n\t\t\t\tresetAndRender();\n\t\t\t\tif (headEl) headEl.innerHTML = this._renderHeader();\n\t\t\t});\n\n\t\t\t// Expand / Copy / Collapse (lazy pretty)\n\t\t\troot.addEventListener(\"click\", async (ev) => {\n\t\t\t\tconst copyBtn = ev.target.closest?.(\".btn-copy\");\n\t\t\t\tif (copyBtn) {\n\t\t\t\t\tconst row = copyBtn.closest?.(\".row\");\n\t\t\t\t\tconst pre = row?.querySelector?.(\".val-pre\");\n\t\t\t\t\tconst txt = pre?.textContent ?? \"\";\n\t\t\t\t\ttry { await navigator.clipboard.writeText(txt); ui.notifications.info(\"Copied value to clipboard.\"); }\n\t\t\t\t\tcatch { ui.notifications.warn(\"Clipboard copy failed.\"); }\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst collapseBtn = ev.target.closest?.(\".btn-collapse\");\n\t\t\t\tif (collapseBtn) { collapseBtn.closest?.(\".row\")?.classList.remove(\"expanded\"); return; }\n\t\t\t\tconst valCell = ev.target.closest?.(\".c-val\");\n\t\t\t\tif (!valCell) return;\n\t\t\t\tconst row = valCell.closest?.(\".row\"); if (!row) return;\n\t\t\t\tconst id = row.getAttribute(\"data-id\") || \"\";\n\t\t\t\tconst pre = row.querySelector(\".val-pre\");\n\t\t\t\tconst loaded = pre?.getAttribute(\"data-loaded\") === \"1\";\n\t\t\t\tif (row.classList.contains(\"expanded\")) {\n\t\t\t\t\trow.classList.remove(\"expanded\");\n\t\t\t\t} else {\n\t\t\t\t\trow.classList.add(\"expanded\");\n\t\t\t\t\tif (!loaded) {\n\t\t\t\t\t\tconst value = this._valueById.get(id);\n\t\t\t\t\t\tconst pretty = toPretty(value);\n\t\t\t\t\t\tif (pre) { pre.textContent = pretty; pre.setAttribute(\"data-loaded\",\"1\"); }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Namespace change → load that namespace (with loader)\n\t\t\tselNs?.addEventListener(\"change\", async (ev) => {\n\t\t\t\tthis.nsSelected = ev.currentTarget.value || \"\";\n\t\t\t\tthis.items = [];\n\t\t\t\tthis._valueById.clear();\n\t\t\t\tbodyEl.innerHTML = \"\";\n\t\t\t\tif (countEl) countEl.textContent = \"0\";\n\t\t\t\tif (totalEl) totalEl.textContent = \"0\";\n\n\t\t\t\tif (!this.nsSelected) return; // blank stays empty\n\n\t\t\t\tconst items = await collectNamespace(this.nsSelected);\n\t\t\t\tif (!items.length) { ui.notifications.warn(\"No settings found or loading cancelled.\"); return; }\n\n\t\t\t\tthis.items = items;\n\t\t\t\tfor (const e of items) this._valueById.set(`${e.namespace}::${e.key}`, e.value);\n\n\t\t\t\tthis._runFilter();\n\t\t\t\tresetAndRender();\n\t\t\t\tif (headEl) headEl.innerHTML = this._renderHeader();\n\t\t\t});\n\n\t\t\t// Debounced typing in search box (only filters currently loaded namespace)\n\t\t\tlet debTimer = null;\n\t\t\tconst scheduleFilter = () => {\n\t\t\t\tclearTimeout(debTimer);\n\t\t\t\tdebTimer = setTimeout(() => {\n\t\t\t\t\tthis.filter = inputEl?.value ?? \"\";\n\t\t\t\t\tthis._runFilter();\n\t\t\t\t\tresetAndRender();\n\t\t\t\t\tif (headEl) headEl.innerHTML = this._renderHeader();\n\t\t\t\t}, DEBOUNCE_MS);\n\t\t\t};\n\t\t\tinputEl?.addEventListener(\"input\", () => scheduleFilter(), { passive: true });\n\t\t\tinputEl?.addEventListener(\"keydown\", (ev) => {\n\t\t\t\tif (ev.key === \"Enter\") {\n\t\t\t\t\tev.preventDefault();\n\t\t\t\t\tclearTimeout(debTimer);\n\t\t\t\t\tthis.filter = inputEl?.value ?? \"\";\n\t\t\t\t\tthis._runFilter();\n\t\t\t\t\tresetAndRender();\n\t\t\t\t\tif (headEl) headEl.innerHTML = this._renderHeader();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\ttry { this.setPosition({ height: \"auto\", left: null, top: null }); } catch {}\n\t\t}\n\t}\n\n\t// -------------------------------------------------------------------------\n\t// Launch (blank state—namespaces only, no settings yet)\n\t// -------------------------------------------------------------------------\n\tnew BBMMNamespaceInspector().render(true);\n})();",
  "folder": null,
  "ownership": {
    "default": 0,
    "EpqDCtSCbVNM4wPj": 3
  },
  "flags": {
    "macro-wheel": {
      "activeCondition": ""
    }
  },
  "_stats": {
    "compendiumSource": null,
    "duplicateSource": null,
    "exportSource": null,
    "coreVersion": "13.348",
    "systemId": "pf2e",
    "systemVersion": "7.4.3",
    "createdTime": 1758040837147,
    "modifiedTime": 1758040837183,
    "lastModifiedBy": "EpqDCtSCbVNM4wPj"
  },
  "_id": "MclNrZrBvfKhgRB5",
  "sort": 200000,
  "_key": "!macros!MclNrZrBvfKhgRB5"
}
